package io.github.rodolfocf.user.infrastructure.security;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
// Indica que esta classe √© uma configura√ß√£o do Spring e ser√° carregada no contexto da aplica√ß√£o

@EnableWebSecurity
// Ativa o suporte de seguran√ßa do Spring Security

@RequiredArgsConstructor
// Gera automaticamente um construtor com todos os atributos finais, permitindo inje√ß√£o de depend√™ncias

public class SecurityConfig {

    private final JwtRequestFilter jwtRequestFilter;
    // Filtro personalizado que valida o JWT em cada requisi√ß√£o

    private final UserDetailsService userDetailsService;
    // Servi√ßo que o Spring usa para buscar os dados do usu√°rio (neste caso, UserService)

    @Bean
    // Indica que este m√©todo cria e registra um bean no contexto do Spring
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // Configura a cadeia de filtros de seguran√ßa que ser√° aplicada em todas as requisi√ß√µes

        return http
                .csrf(AbstractHttpConfigurer::disable)
                // Desabilita a prote√ß√£o CSRF (n√£o necess√°ria em APIs REST que usam JWT)

                .authorizeHttpRequests(auth -> auth
                                .requestMatchers("/auth/**").permitAll()
                                // Libera todas as rotas que come√ßam com /auth
                                // üîß ALTERAR AQUI se voc√™ mudar o prefixo dos endpoints de autentica√ß√£o (ex: /api/auth)

                                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                                // Libera rotas do Swagger para facilitar testes e documenta√ß√£o
                                // üîß REMOVER AQUI se n√£o usar Swagger neste projeto

                                .anyRequest().authenticated()
                        // Qualquer outra requisi√ß√£o precisa de autentica√ß√£o com JWT v√°lido
                        // üîß ALTERAR AQUI se quiser deixar outros endpoints p√∫blicos ou exigir roles espec√≠ficas
                )
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                // Define que n√£o haver√° sess√£o no servidor, apenas autentica√ß√£o stateless via JWT

                .authenticationProvider(authenticationProvider())
                // Registra o provedor de autentica√ß√£o (quem valida login e senha)

                .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class)
                // Adiciona o filtro JWT antes do filtro padr√£o de autentica√ß√£o do Spring

                .build();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        // Cria o provedor padr√£o de autentica√ß√£o baseado em DAO.
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());

        return authProvider;
    }


    @Bean
    // Cria o bean de PasswordEncoder
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
        // Usa o algoritmo BCrypt para encriptar e validar senhas
    }

    @Bean
    // Cria o bean de AuthenticationManager
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
        // Recupera o gerenciador de autentica√ß√£o configurado pelo Spring
    }
}
